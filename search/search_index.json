{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"with-cloudflared","text":"<p>With-cloudflared provides a context manager to start and stop cloudflared. Cloudflare Tunnel provides you with a secure way to connect your resources to Cloudflare without a publicly routable IP address. This is useful for development and testing, as well as for production use cases. See the Cloudflare Tunnel documentation for more information.</p>"},{"location":"#installation","title":"Installation","text":"<pre><code>pip install with-cloudflared\n</code></pre>"},{"location":"#usage","title":"Usage","text":"<pre><code>import uvicorn\nfrom fastapi import FastAPI\nfrom with_cloudflared import cloudflared\n\napp = FastAPI()\n\n@app.get(\"/\")\ndef read_root():\n    return {\"Hello\": \"World\"}\n\nif __name__ == \"__main__\":\n    port = 8000\n    with cloudflared(port=port) as cloudflared_address:\n        print(f\" * Running on {cloudflared_address}\")\n        uvicorn.run(app, port=port)\n</code></pre> <p>This will start cloudflared and then start the FastAPI server. The app will be publicly available at the cloudflared address e.g. something like <code>https://rp-son-configured-army.trycloudflare.com</code>.</p> <p>The first time you run this it will take a few seconds to download and start cloudflared. Subsequent runs will be much faster.</p>"},{"location":"reference/cloudflared/","title":"Cloudflared","text":""},{"location":"reference/cloudflared/#src.with_cloudflared.cloudflared.cloudflared","title":"<code>cloudflared(port=8000, metrics_port=None, tunnel_id=None, config_path=None, force=False, max_retries=10)</code>","text":"<p>A context manager for running a Cloudflare tunnel. It downloads the appropriate Cloudflare binary, starts the tunnel, and yields the tunnel URL. After the context is exited, it terminates the tunnel.</p> <p>Parameters:</p> Name Type Description Default <code>port</code> <code>int</code> <p>The local port to tunnel. Defaults to 8000.</p> <code>8000</code> <code>metrics_port</code> <code>int</code> <p>The port to serve metrics on. If not provided, a random port between 8100 and 9000 is chosen.</p> <code>None</code> <code>tunnel_id</code> <code>str</code> <p>The ID of the tunnel to run. If not provided, a tunnel to the local port is created.</p> <code>None</code> <code>config_path</code> <code>str</code> <p>The path to a Cloudflare configuration file. If provided, the 'run' command is used with this configuration.</p> <code>None</code> <code>force</code> <code>bool</code> <p>If True, forces the download of the Cloudflare binary even if it already exists. Defaults to False.</p> <code>False</code> <code>max_retries</code> <code>int</code> <p>The maximum number of times to retry connecting to the Cloudflare Edge. Defaults to 10.</p> <code>10</code> <p>Yields:</p> Name Type Description <code>str</code> <p>The URL of the Cloudflare tunnel.</p> <p>Raises:</p> Type Description <code>Exception</code> <p>If it can't connect to the Cloudflare Edge after max_retries attempts.</p> Side Effects <p>Downloads the Cloudflare binary, starts a subprocess running the Cloudflare tunnel, and modifies the permissions of the Cloudflare binary.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; with cloudflared(port=8080) as url:\n...     print(f\"Cloudflare tunnel running at {url}\")\nCloudflare tunnel running at https://randomsubdomain.trycloudflare.com\n</code></pre> Source code in <code>src/with_cloudflared/cloudflared.py</code> <pre><code>@contextmanager\ndef cloudflared(port=8000, metrics_port=None, tunnel_id=None, config_path=None, force=False, max_retries=10):\n    \"\"\"\n    A context manager for running a Cloudflare tunnel. It downloads the appropriate Cloudflare binary, starts the tunnel, and yields the tunnel URL. After the context is exited, it terminates the tunnel.\n\n    Args:\n      port (int, optional): The local port to tunnel. Defaults to 8000.\n      metrics_port (int, optional): The port to serve metrics on. If not provided, a random port between 8100 and 9000 is chosen.\n      tunnel_id (str, optional): The ID of the tunnel to run. If not provided, a tunnel to the local port is created.\n      config_path (str, optional): The path to a Cloudflare configuration file. If provided, the 'run' command is used with this configuration.\n      force (bool, optional): If True, forces the download of the Cloudflare binary even if it already exists. Defaults to False.\n      max_retries (int, optional): The maximum number of times to retry connecting to the Cloudflare Edge. Defaults to 10.\n\n    Yields:\n      str: The URL of the Cloudflare tunnel.\n\n    Raises:\n      Exception: If it can't connect to the Cloudflare Edge after max_retries attempts.\n\n    Side Effects:\n      Downloads the Cloudflare binary, starts a subprocess running the Cloudflare tunnel, and modifies the permissions of the Cloudflare binary.\n\n    Examples:\n      &gt;&gt;&gt; with cloudflared(port=8080) as url:\n      ...     print(f\"Cloudflare tunnel running at {url}\")\n      Cloudflare tunnel running at https://randomsubdomain.trycloudflare.com\n    \"\"\"\n    if metrics_port is None:\n        metrics_port = randint(8100, 9000)\n    system, machine = platform.system(), platform.machine()\n    command = get_command(system, machine)\n    cloudflared_path = str(Path(tempfile.gettempdir()))\n    if system == \"Darwin\":\n        download_cloudflared(cloudflared_path, \"cloudflared-darwin-amd64.tgz\", force)\n        extract_tarball(cloudflared_path, \"cloudflared-darwin-amd64.tgz\")\n    else:\n        download_cloudflared(cloudflared_path, command, force)\n\n    executable = str(Path(cloudflared_path, command))\n    os.chmod(executable, 0o777)\n\n    cloudflared_command = [executable, 'tunnel', '--metrics', f'127.0.0.1:{metrics_port}']\n    if config_path:\n        cloudflared_command += ['--config', config_path, 'run']\n    elif tunnel_id:\n        cloudflared_command += ['--url', f'http://127.0.0.1:{port}', 'run', tunnel_id]\n    else:\n        cloudflared_command += ['--url', f'http://127.0.0.1:{port}']\n    try:\n        if system == \"Darwin\" and machine == \"arm64\":\n            cloudflared_process = subprocess.Popen(['arch', '-x86_64'] + cloudflared_command, stdout=subprocess.DEVNULL, stderr=subprocess.STDOUT)\n        else:\n            cloudflared_process = subprocess.Popen(cloudflared_command, stdout=subprocess.DEVNULL, stderr=subprocess.STDOUT)\n        localhost_url = f\"http://127.0.0.1:{metrics_port}/metrics\"\n\n        for _ in range(max_retries):\n            try:\n                with urllib.request.urlopen(localhost_url) as response:\n                    metrics = response.read().decode('utf-8')\n                if tunnel_id or config_path:\n                    # If tunnel_id or config_path is provided, we check for cloudflared_tunnel_ha_connections, as no tunnel URL is available in the metrics\n                    if re.search(r\"cloudflared_tunnel_ha_connections\\s\\d\", metrics):\n                        # No tunnel URL is available in the metrics, so we return a generic text\n                        tunnel_url = \"preconfigured tunnel URL\"\n                        break\n                else:\n                    # If neither tunnel_id nor config_path is provided, we check for the tunnel URL in the metrics\n                    tunnel_url = (re.search(r\"(?P&lt;url&gt;https?:\\/\\/[^\\s]+.trycloudflare.com)\", metrics).group(\"url\"))\n                    break\n            except Exception:\n                time.sleep(3)\n        else:\n            raise Exception(\"Can't connect to Cloudflare Edge!\")\n        yield tunnel_url\n    finally:\n        # Cleanup phase\n        cloudflared_process.terminate()\n        cloudflared_process.wait()\n</code></pre>"},{"location":"reference/config/","title":"Config","text":""},{"location":"reference/utils/","title":"Utils","text":""},{"location":"reference/utils/#src.with_cloudflared.utils.download_cloudflared","title":"<code>download_cloudflared(cloudflared_path, command, force=False)</code>","text":"<p>Downloads the cloudflared binary if it does not exist or if force is True.</p> <p>Parameters:</p> Name Type Description Default <code>cloudflared_path</code> <code>str</code> <p>The path where the cloudflared binary should be saved.</p> required <code>command</code> <code>str</code> <p>The command to run.</p> required <code>force</code> <code>bool</code> <p>Whether to force the download even if the file exists. Defaults to False.</p> <code>False</code> Side Effects <p>Downloads the cloudflared binary.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; download_cloudflared('/path/to/cloudflared', 'cloudflared', force=True)\n</code></pre> Source code in <code>src/with_cloudflared/utils.py</code> <pre><code>def download_cloudflared(cloudflared_path, command, force=False):\n    \"\"\"\n    Downloads the cloudflared binary if it does not exist or if force is True.\n\n    Args:\n      cloudflared_path (str): The path where the cloudflared binary should be saved.\n      command (str): The command to run.\n      force (bool, optional): Whether to force the download even if the file exists. Defaults to False.\n\n    Side Effects:\n      Downloads the cloudflared binary.\n\n    Examples:\n      &gt;&gt;&gt; download_cloudflared('/path/to/cloudflared', 'cloudflared', force=True)\n    \"\"\"\n    if Path(cloudflared_path, command).exists() and not force:\n        return\n    system, machine = platform.system(), platform.machine()\n    url = get_url(system, machine)\n    download_file(url)\n</code></pre>"},{"location":"reference/utils/#src.with_cloudflared.utils.download_file","title":"<code>download_file(url)</code>","text":"<p>Downloads a file from a given URL.</p> <p>Parameters:</p> Name Type Description Default <code>url</code> <code>str</code> <p>The URL of the file to download.</p> required <p>Returns:</p> Name Type Description <code>str</code> <p>The path where the file was downloaded.</p> Side Effects <p>Downloads a file from a given URL.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; download_file('https://example.com/file.txt')\n'/tmp/file.txt'\n</code></pre> Source code in <code>src/with_cloudflared/utils.py</code> <pre><code>def download_file(url):\n    \"\"\"\n    Downloads a file from a given URL.\n\n    Args:\n      url (str): The URL of the file to download.\n\n    Returns:\n      str: The path where the file was downloaded.\n\n    Side Effects:\n      Downloads a file from a given URL.\n\n    Examples:\n      &gt;&gt;&gt; download_file('https://example.com/file.txt')\n      '/tmp/file.txt'\n    \"\"\"\n    local_filename = url.split('/')[-1]\n    # download files using urllib\n    download_path = str(Path(tempfile.gettempdir(), local_filename))\n    with urllib.request.urlopen(url) as response:\n        with open(download_path, 'wb') as f:\n            shutil.copyfileobj(response, f)\n    return download_path\n</code></pre>"},{"location":"reference/utils/#src.with_cloudflared.utils.extract_tarball","title":"<code>extract_tarball(tar_path, filename)</code>","text":"<p>Extracts a tarball file at a given path.</p> <p>Parameters:</p> Name Type Description Default <code>tar_path</code> <code>str</code> <p>The path where the tarball file is located.</p> required <code>filename</code> <code>str</code> <p>The name of the tarball file.</p> required Side Effects <p>Extracts the tarball file at the given path.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; extract_tarball('/path/to/tarball', 'file.tar.gz')\n</code></pre> Source code in <code>src/with_cloudflared/utils.py</code> <pre><code>def extract_tarball(tar_path, filename):\n    \"\"\"\n    Extracts a tarball file at a given path.\n\n    Args:\n      tar_path (str): The path where the tarball file is located.\n      filename (str): The name of the tarball file.\n\n    Side Effects:\n      Extracts the tarball file at the given path.\n\n    Examples:\n      &gt;&gt;&gt; extract_tarball('/path/to/tarball', 'file.tar.gz')\n    \"\"\"\n    tar = tarfile.open(tar_path+'/'+filename, 'r')\n    for item in tar:\n        tar.extract(item, tar_path)\n        if item.name.find(\".tgz\") != -1 or item.name.find(\".tar\") != -1:\n            tar.extract(item.name, \"./\" + item.name[:item.name.rfind('/')])\n</code></pre>"},{"location":"reference/utils/#src.with_cloudflared.utils.get_command","title":"<code>get_command(system, machine)</code>","text":"<p>Retrieves the command for a given system and machine from the CLOUDFLARED_CONFIG.</p> <p>Parameters:</p> Name Type Description Default <code>system</code> <code>str</code> <p>The system for which the command is needed.</p> required <code>machine</code> <code>str</code> <p>The machine for which the command is needed.</p> required <p>Returns:</p> Name Type Description <code>str</code> <p>The command for the given system and machine.</p> <p>Raises:</p> Type Description <code>Exception</code> <p>If the machine is not supported on the system.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; get_command('Linux', 'x86_64')\n'cloudflared'\n</code></pre> Source code in <code>src/with_cloudflared/utils.py</code> <pre><code>def get_command(system, machine):\n    \"\"\"\n    Retrieves the command for a given system and machine from the CLOUDFLARED_CONFIG.\n\n    Args:\n      system (str): The system for which the command is needed.\n      machine (str): The machine for which the command is needed.\n\n    Returns:\n      str: The command for the given system and machine.\n\n    Raises:\n      Exception: If the machine is not supported on the system.\n\n    Examples:\n      &gt;&gt;&gt; get_command('Linux', 'x86_64')\n      'cloudflared'\n    \"\"\"\n    try:\n        return CLOUDFLARED_CONFIG[(system, machine)]['command']\n    except KeyError:\n        raise Exception(f\"{machine} is not supported on {system}\")\n</code></pre>"},{"location":"reference/utils/#src.with_cloudflared.utils.get_url","title":"<code>get_url(system, machine)</code>","text":"<p>Retrieves the URL for a given system and machine from the CLOUDFLARED_CONFIG.</p> <p>Parameters:</p> Name Type Description Default <code>system</code> <code>str</code> <p>The system for which the URL is needed.</p> required <code>machine</code> <code>str</code> <p>The machine for which the URL is needed.</p> required <p>Returns:</p> Name Type Description <code>str</code> <p>The URL for the given system and machine.</p> <p>Raises:</p> Type Description <code>Exception</code> <p>If the machine is not supported on the system.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; get_url('Linux', 'x86_64')\n'https://bin.equinox.io/c/VdrWdbjqyF/cloudflared-stable-linux-amd64.tgz'\n</code></pre> Source code in <code>src/with_cloudflared/utils.py</code> <pre><code>def get_url(system, machine):\n    \"\"\"\n    Retrieves the URL for a given system and machine from the CLOUDFLARED_CONFIG.\n\n    Args:\n      system (str): The system for which the URL is needed.\n      machine (str): The machine for which the URL is needed.\n\n    Returns:\n      str: The URL for the given system and machine.\n\n    Raises:\n      Exception: If the machine is not supported on the system.\n\n    Examples:\n      &gt;&gt;&gt; get_url('Linux', 'x86_64')\n      'https://bin.equinox.io/c/VdrWdbjqyF/cloudflared-stable-linux-amd64.tgz'\n    \"\"\"\n    try:\n        return CLOUDFLARED_CONFIG[(system, machine)]['url']\n    except KeyError:\n        raise Exception(f\"{machine} is not supported on {system}\")\n</code></pre>"}]}